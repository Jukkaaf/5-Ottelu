import logic.TournamentLogic;
import logic.SaveLoad;
import ui.ScoreBoard;
import ui.EditTournament;
import ui.Options;
import ui.EditPlayer;
import tablesAndGraphics.RankTable;
import tablesAndGraphics.TeamTable;
import objects.Tournament;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import tablesAndGraphics.TeamCellRenderer;
import ui.AddPlayer;


/**
 *  The main window of the program.
 *  Used to go select menus and actually go trough the tournament.
 * 
 * 
 * @author Jukka Ala-Fossi
 */
public class MainWindow extends javax.swing.JFrame {
    /**
    * The current tournament. This where a newly made tournament will be placed
    * if you have a open tournament and you make a new one, it will be replaced.
    */
    private Tournament currentTournament;
    private SaveLoad saveload;
    private TournamentLogic logic;
    private boolean first = true;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        this.setResizable(false);
        currentTournament = new Tournament("Default name");
        logic = new TournamentLogic(currentTournament);
        
        initComponents();
        tableTeams.getTableHeader().setReorderingAllowed(false);
        this.setLocationRelativeTo(null);
        menuUndo.setEnabled(false);
        menuRedo.setEnabled(false);
        menuUndo.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.Event.CTRL_MASK));
        menuRedo.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.Event.CTRL_MASK));
        menuSave.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.Event.CTRL_MASK));
        
        buttonNextRound.setEnabled(false);
        buttonNextGame.setEnabled(false);
        
        menuSaveAs.setEnabled(false);
        menuSave.setEnabled(false);
        
        menuEdit.setEnabled(false);
        menuView.setEnabled(false);
        menuStart.setEnabled(false);
        
        guiDisableButtons();
        buttonNextGame.setEnabled(false);
        textReminder.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableTeams = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableRank = new javax.swing.JTable();
        labelGameName = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        labelRoundCurrent = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        labelRoundTotal = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        buttonRankUp = new javax.swing.JButton();
        buttonRankDown = new javax.swing.JButton();
        buttonReplacePlayer = new javax.swing.JButton();
        labelGameCurrent = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        labelGameTotal = new javax.swing.JLabel();
        buttonTeamName = new javax.swing.JButton();
        buttonPoints = new javax.swing.JButton();
        buttonNextRound = new javax.swing.JButton();
        buttonNextGame = new javax.swing.JButton();
        textReminder = new javax.swing.JLabel();
        buttonDisqualify = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuNewTournament = new javax.swing.JMenuItem();
        menuOpenTournament = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuSave = new javax.swing.JMenuItem();
        menuSaveAs = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        menuOptions = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        menuStart = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        menuSkip = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        menuUndo = new javax.swing.JMenuItem();
        menuRedo = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuEditTournament = new javax.swing.JMenuItem();
        menuAddPlayers = new javax.swing.JMenuItem();
        MenuEditPlayer = new javax.swing.JMenuItem();
        menuView = new javax.swing.JMenu();
        menuScoreBoard = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("5 Ottelu");

        jScrollPane1.setViewportView(tableTeams);

        jScrollPane2.setViewportView(tableRank);

        labelGameName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelGameName.setText("GameName");

        jLabel1.setText("Round NO. :");

        labelRoundCurrent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelRoundCurrent.setText("1");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("/");

        labelRoundTotal.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelRoundTotal.setText("5");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Teams");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Rank");

        buttonRankUp.setText("Move Up");
        buttonRankUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRankUpActionPerformed(evt);
            }
        });

        buttonRankDown.setText("Move Down");
        buttonRankDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRankDownActionPerformed(evt);
            }
        });

        buttonReplacePlayer.setText("Replace Player");
        buttonReplacePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReplacePlayerActionPerformed(evt);
            }
        });

        labelGameCurrent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelGameCurrent.setText("1");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("/");

        labelGameTotal.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelGameTotal.setText("5");

        buttonTeamName.setText("Team name");
        buttonTeamName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTeamNameActionPerformed(evt);
            }
        });

        buttonPoints.setText("Give points");
        buttonPoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPointsActionPerformed(evt);
            }
        });

        buttonNextRound.setText("Load next round");
        buttonNextRound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextRoundActionPerformed(evt);
            }
        });

        buttonNextGame.setText("Load next match");
        buttonNextGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextGameActionPerformed(evt);
            }
        });

        textReminder.setText("add possible new players now");

        buttonDisqualify.setText("Disqualify Player");
        buttonDisqualify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDisqualifyActionPerformed(evt);
            }
        });

        buttonClear.setText("Clear");
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        menuNewTournament.setText("New Tournament");
        menuNewTournament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewTournamentActionPerformed(evt);
            }
        });
        jMenu1.add(menuNewTournament);

        menuOpenTournament.setText("Open Tournament");
        menuOpenTournament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenTournamentActionPerformed(evt);
            }
        });
        jMenu1.add(menuOpenTournament);
        jMenu1.add(jSeparator2);

        menuSave.setText("Save");
        menuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(menuSave);

        menuSaveAs.setText("Save As...");
        menuSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(menuSaveAs);
        jMenu1.add(jSeparator3);

        menuOptions.setText("Options");
        menuOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOptionsActionPerformed(evt);
            }
        });
        jMenu1.add(menuOptions);

        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        jMenu1.add(menuExit);

        jMenuBar1.add(jMenu1);

        menuEdit.setText("Edit");

        menuStart.setText("Start");
        menuStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuStartActionPerformed(evt);
            }
        });
        menuEdit.add(menuStart);
        menuEdit.add(jSeparator4);

        menuSkip.setText("Skip Round");
        menuSkip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSkipActionPerformed(evt);
            }
        });
        menuEdit.add(menuSkip);
        menuEdit.add(jSeparator5);

        menuUndo.setText("Undo");
        menuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuUndoActionPerformed(evt);
            }
        });
        menuEdit.add(menuUndo);

        menuRedo.setText("Redo");
        menuRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRedoActionPerformed(evt);
            }
        });
        menuEdit.add(menuRedo);
        menuEdit.add(jSeparator1);

        menuEditTournament.setText("Edit Tournament");
        menuEditTournament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditTournamentActionPerformed(evt);
            }
        });
        menuEdit.add(menuEditTournament);

        menuAddPlayers.setText("Add Players");
        menuAddPlayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAddPlayersActionPerformed(evt);
            }
        });
        menuEdit.add(menuAddPlayers);

        MenuEditPlayer.setText("Edit Players");
        MenuEditPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuEditPlayerActionPerformed(evt);
            }
        });
        menuEdit.add(MenuEditPlayer);

        jMenuBar1.add(menuEdit);

        menuView.setText("View");

        menuScoreBoard.setText("Score Board");
        menuScoreBoard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuScoreBoardActionPerformed(evt);
            }
        });
        menuView.add(menuScoreBoard);

        jMenuBar1.add(menuView);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(buttonClear)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(buttonDisqualify)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(buttonReplacePlayer))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelGameName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelGameCurrent, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelGameTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelRoundCurrent, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelRoundTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonNextRound, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonNextGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textReminder)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonRankUp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonRankDown, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                            .addComponent(buttonTeamName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(buttonPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelGameName)
                                .addComponent(labelGameCurrent)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelGameTotal))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(buttonNextGame)
                                .addComponent(textReminder)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(labelRoundCurrent)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelRoundTotal)
                            .addComponent(buttonNextRound))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonRankUp, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonRankDown, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(buttonTeamName)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonReplacePlayer)
                    .addComponent(buttonDisqualify)
                    .addComponent(buttonClear))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOptionsActionPerformed
        // open the options menu
        Options openOptions = new Options(currentTournament);
        openOptions.pack();
        openOptions.setVisible(true);
    }//GEN-LAST:event_menuOptionsActionPerformed
    
    
    /** 
     * Create new tournaments.
    */
    private void menuNewTournamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewTournamentActionPerformed
        // lets make sure they user wants to replace the current tournament
        boolean allowed = true;
        // if its not the first tournament made in this session
        if(!first){
            if (JOptionPane.showConfirmDialog(null, "Creating a new tournament will delete unsaved changes", "WARNING", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                allowed = true;
            } else {
                allowed = false;
            }
        }
        
        if(allowed){
            currentTournament = new Tournament("Default name");
            EditTournament newTournament = new EditTournament(currentTournament);
            newTournament.pack();
            newTournament.setVisible(true);
            guiUpdateUndoRedo();
            saveload = new SaveLoad(currentTournament);
            menuEdit.setEnabled(true);
            menuView.setEnabled(true);
            guiEnableSave(); 
            first = false;
            //guiEnableButtons();
            menuStart.setEnabled(true);
            buttonNextGame.setEnabled(false);
        }       
    }//GEN-LAST:event_menuNewTournamentActionPerformed

    private void menuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveActionPerformed
        if(currentTournament != null && saveload != null){
            saveload.save(); 
        }       
    }//GEN-LAST:event_menuSaveActionPerformed
    /** 
     * Open previously saved tournaments.
    */
    private void menuOpenTournamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenTournamentActionPerformed
        first = false;

        // load a previously saved tournament        
        if(currentTournament == null){
            currentTournament = new Tournament("Default name");
        }
        // create new saveload object if needed
        if(saveload == null){
            saveload = new SaveLoad(currentTournament);
        }    
        
        if(saveload.load()){
            // if we succsesfully loaded
            // allow starting the tournament
            menuStart.setEnabled(true);
            menuEdit.setEnabled(true);
            menuView.setEnabled(true);
            //guiStart();
            guiEnableSave();
        }
        else{
            System.out.println("Loading the tournament failed");
            JOptionPane.showMessageDialog(this, "Error, selected folder is invalid.");
        }
    }//GEN-LAST:event_menuOpenTournamentActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        // if the user has set the program to save when quitting
        if(currentTournament.getSaveOnQuit()){
            saveload.save();
        }       
        dispose();
    }//GEN-LAST:event_menuExitActionPerformed

    /** 
     * Move the selected team down one rank. 
    */
    private void buttonRankDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRankDownActionPerformed

        int row = tableRank.getSelectedRow();
        logic.moveTeamDown(row);
        tableRank.updateUI();
        if(row +1 < logic.getCurrentTeamsAmmount()){
            tableRank.setRowSelectionInterval(row + 1, row + 1);
        }       
    }//GEN-LAST:event_buttonRankDownActionPerformed
    /** 
     * Replace the selected player with a suitable player. 
    */
    private void buttonReplacePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReplacePlayerActionPerformed
        int column = tableTeams.getSelectedColumn();
        int row = tableTeams.getSelectedRow();
        if(row >= 0 && column >= 0){
            logic.replacePlayer(column, row, true);
            tableTeams.updateUI();
        }  
    }//GEN-LAST:event_buttonReplacePlayerActionPerformed
    /** 
     * Move the selected team up one rank.
    */
    private void buttonRankUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRankUpActionPerformed
        // move a team up a rank
        int row = tableRank.getSelectedRow();
        logic.moveTeamUp(row);
        tableRank.updateUI();
        if(row - 1 >= 0){
            tableRank.setRowSelectionInterval(row - 1, row - 1);
        }  
    }//GEN-LAST:event_buttonRankUpActionPerformed
    /** 
     * Change the name of the selected team.
    */
    private void buttonTeamNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTeamNameActionPerformed
        int row = tableRank.getSelectedRow();
        String name = JOptionPane.showInputDialog(tableRank, "Enter new name", "text", JOptionPane.QUESTION_MESSAGE);
        int index = logic.setTeamName(row, name);
        tableTeams.getColumnModel().getColumn(index).setHeaderValue(name);
        guiUpdateTables();
    }//GEN-LAST:event_buttonTeamNameActionPerformed
    /** 
     * Allocate points to the teams.
    */
    private void buttonPointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPointsActionPerformed
        menuStart.setEnabled(false);
        logic.allocatePoints();
        guiUpdateUndoRedo();
        tableTeams.updateUI();
        guiDisableButtons();
    }//GEN-LAST:event_buttonPointsActionPerformed
    /** 
     * Once a round has been completed we load the next round. 
    */
    private void buttonNextRoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextRoundActionPerformed
        if(logic.canChangeRound()){          
            logic.loadNextRound();
            guiUpdateTables();
            guiUpdateUndoRedo();
            guiUpdateLabels();
            guiEnableButtons();
        }
    }//GEN-LAST:event_buttonNextRoundActionPerformed
    /** 
     * Once all the matches from a game have been played we load the next one. 
    */
    private void buttonNextGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextGameActionPerformed
        if(logic.canChangeMatch()){
            textReminder.setVisible(false);
            
            logic.loadNextMatch();
            guiUpdateUndoRedo();
            tableTeams.setModel(new TeamTable(logic.getCurrentTeams()));           
            tableTeams.setDefaultRenderer(String.class, new TeamCellRenderer(logic.getCurrentTeams()));           
            tableRank.setModel(new RankTable(logic.getCurrentTeams()));    
            guiUpdateLabels();  
            
            if(currentTournament.getMatchList().get(logic.getCurrentMatchIndex()).getCompleted()){
                guiDisableButtons();              
            }
            else{
                guiEnableButtons();
            }
            // if the user has set the program to save when changing games
            if(currentTournament.getSaveGame()){
                saveload.save();
            }
        }        
    }//GEN-LAST:event_buttonNextGameActionPerformed
    /** 
     * Save the tournament with a new name and location.
    */
    private void menuSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveAsActionPerformed
        if(currentTournament != null && saveload != null){
            saveload.saveAs(); 
        }   
    }//GEN-LAST:event_menuSaveAsActionPerformed
    /** 
     * Open the scoreboard. 
    */
    private void menuScoreBoardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuScoreBoardActionPerformed
        ScoreBoard test = new ScoreBoard(logic.getSortedPlayerList());
        test.pack();
        test.setVisible(true);
    }//GEN-LAST:event_menuScoreBoardActionPerformed
    /** 
     * Open the window for editing user and player information.
    */
    private void MenuEditPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuEditPlayerActionPerformed
        if(currentTournament != null){
            EditPlayer editPlayer = new EditPlayer(currentTournament);
            editPlayer.pack();
            editPlayer.setVisible(true);
        }
    }//GEN-LAST:event_MenuEditPlayerActionPerformed
    /** 
     * Edit the current tournament.
    */
    private void menuEditTournamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditTournamentActionPerformed
        if(currentTournament != null){
            EditTournament editTournament = new EditTournament(currentTournament);
            editTournament.pack();
            editTournament.setVisible(true);
        }
    }//GEN-LAST:event_menuEditTournamentActionPerformed
    /** 
     *  Redo allocating points to the teams.
    */
    private void menuRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRedoActionPerformed
        if(logic.redo()){
            guiUpdateUndoRedo();
            tableTeams.updateUI();
            guiDisableButtons();
        }
    }//GEN-LAST:event_menuRedoActionPerformed
    /** 
     *  Undo allocating points to the teams.
    */
    private void menuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuUndoActionPerformed
        if(logic.undo()){
            guiUpdateUndoRedo();
            tableTeams.updateUI();
            guiEnableButtons();
        }
    }//GEN-LAST:event_menuUndoActionPerformed
    /** 
     *  Start the tournament.
    */
    private void menuStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuStartActionPerformed
        guiStart();
    }//GEN-LAST:event_menuStartActionPerformed
    /** 
     *  Mostly useful if the current round has only a few unused players
     *  and if these players are absent. In these situations there has to be a way to skip the round
     *  without allocating points.
    */
    private void menuSkipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSkipActionPerformed
        if(logic.canChangeRound()){          
            logic.loadNextRound();
            guiUpdateTables();
            guiUpdateUndoRedo();
            guiUpdateLabels();
            guiEnableButtons();
        }
        else if(logic.canChangeMatch()){
            logic.loadNextMatch();
            guiUpdateUndoRedo();
            tableTeams.setModel(new TeamTable(logic.getCurrentTeams()));           
            tableTeams.setDefaultRenderer(String.class, new TeamCellRenderer(logic.getCurrentTeams()));           
            tableRank.setModel(new RankTable(logic.getCurrentTeams()));    
            guiUpdateLabels();  
            
            if(currentTournament.getMatchList().get(logic.getCurrentMatchIndex()).getCompleted()){
                guiDisableButtons();              
            }
            else{
                guiEnableButtons();
            }
            // if the user has set the program to save when changing games
            if(currentTournament.getSaveGame()){
                saveload.save();
            }
        }
    }//GEN-LAST:event_menuSkipActionPerformed

    private void menuAddPlayersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAddPlayersActionPerformed
        if(currentTournament != null){
            AddPlayer addPlayer = new AddPlayer(currentTournament);
            addPlayer.pack();
            addPlayer.setVisible(true);
        }
    }//GEN-LAST:event_menuAddPlayersActionPerformed

    private void buttonDisqualifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDisqualifyActionPerformed
        int column = tableTeams.getSelectedColumn();
        int row = tableTeams.getSelectedRow();
        if(row >= 0 && column >= 0){
            logic.disqualifyPlayer(column, row);
            tableTeams.updateUI();
        } 
    }//GEN-LAST:event_buttonDisqualifyActionPerformed

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        int column = tableTeams.getSelectedColumn();
        int row = tableTeams.getSelectedRow();
        if(row >= 0 && column >= 0){
            logic.replaceWithNull(column, row);
            tableTeams.updateUI();
        }
    }//GEN-LAST:event_buttonClearActionPerformed
    /** 
     *  Start the tournament.
    */
    private void guiStart(){
        //menuStart.setEnabled(false);
        
        logic = new TournamentLogic(currentTournament);
        guiUpdateUndoRedo();
        logic.createNewTeams(logic.getCurrentMatch().getTeamsAmmount());
        guiUpdateLabels();

        tableTeams.setModel(new TeamTable(logic.getCurrentTeams()));       
        tableTeams.setDefaultRenderer(String.class, new TeamCellRenderer(logic.getCurrentTeams()));       
        tableRank.setModel(new RankTable(logic.getCurrentTeams()));

        first = false;
        guiEnableButtons();
        // if the current Match has already been completed previously
        if(currentTournament.getMatchList().get(logic.getCurrentMatchIndex()).getCompleted()){
            guiDisableButtons();
        }
        buttonNextGame.setEnabled(false);
        textReminder.setVisible(false);
    }
    /** 
     *  Update if the undo and redo menu items are enabled.
    */
    private void guiUpdateUndoRedo(){
        menuUndo.setEnabled(logic.canUndo());
        menuRedo.setEnabled(logic.canRedo());
    }
    /** 
     *  Update the tables after changes have been made.
    */
    private void guiUpdateTables(){
        tableTeams.updateUI();
        tableRank.updateUI();
    }
    /** 
     *  Update the labels to the correct information.
    */
    private void guiUpdateLabels(){
        labelGameName.setText(logic.getCurrentMatch().getName());
        labelRoundTotal.setText(new Integer(logic.getCurrentMaxRounds()).toString());
        labelRoundCurrent.setText(new Integer(logic.getCurrentRoundIndex() + 1).toString());
        labelGameTotal.setText(new Integer(currentTournament.getMatches()).toString());
        labelGameCurrent.setText(new Integer(logic.getCurrentMatchIndex() + 1).toString());
    }
    /** 
     *  Prevent the user from pressing buttons at the wrong time.
    */
    private void guiDisableButtons(){
        buttonRankUp.setEnabled(false);
        buttonRankDown.setEnabled(false);
        buttonTeamName.setEnabled(false);
        buttonReplacePlayer.setEnabled(false);
        buttonDisqualify.setEnabled(false);
        buttonClear.setEnabled(false);
        buttonPoints.setEnabled(false);
        
        // when points have been allocated nextgame and round buttons will be enabled, if possible
        buttonNextGame.setEnabled(logic.canChangeMatch());
        textReminder.setVisible(logic.canChangeMatch());
        buttonNextRound.setEnabled(logic.canChangeRound());
    }
    /** 
     * Enable user to press the buttons again.
    */
    private void guiEnableButtons(){
        buttonRankUp.setEnabled(true);
        buttonRankDown.setEnabled(true);
        buttonTeamName.setEnabled(true);
        buttonReplacePlayer.setEnabled(true);
        buttonDisqualify.setEnabled(true);
        buttonClear.setEnabled(true);
        buttonPoints.setEnabled(true);       
        // when points have not been allocated you cannot go to next match or game
        buttonNextGame.setEnabled(false);
        buttonNextRound.setEnabled(false);
    }
    /** 
     * Enable the save menu items.
    */
    private void guiEnableSave(){
        menuSaveAs.setEnabled(true);
        if(saveload.canSave()){
            menuSave.setEnabled(true);
        }
        else{
            menuSave.setEnabled(false);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MenuEditPlayer;
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonDisqualify;
    private javax.swing.JButton buttonNextGame;
    private javax.swing.JButton buttonNextRound;
    private javax.swing.JButton buttonPoints;
    private javax.swing.JButton buttonRankDown;
    private javax.swing.JButton buttonRankUp;
    private javax.swing.JButton buttonReplacePlayer;
    private javax.swing.JButton buttonTeamName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JLabel labelGameCurrent;
    private javax.swing.JLabel labelGameName;
    private javax.swing.JLabel labelGameTotal;
    private javax.swing.JLabel labelRoundCurrent;
    private javax.swing.JLabel labelRoundTotal;
    private javax.swing.JMenuItem menuAddPlayers;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenuItem menuEditTournament;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenuItem menuNewTournament;
    private javax.swing.JMenuItem menuOpenTournament;
    private javax.swing.JMenuItem menuOptions;
    private javax.swing.JMenuItem menuRedo;
    private javax.swing.JMenuItem menuSave;
    private javax.swing.JMenuItem menuSaveAs;
    private javax.swing.JMenuItem menuScoreBoard;
    private javax.swing.JMenuItem menuSkip;
    private javax.swing.JMenuItem menuStart;
    private javax.swing.JMenuItem menuUndo;
    private javax.swing.JMenu menuView;
    private javax.swing.JTable tableRank;
    private javax.swing.JTable tableTeams;
    private javax.swing.JLabel textReminder;
    // End of variables declaration//GEN-END:variables
}
